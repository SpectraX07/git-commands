# GitHub Actions CI/CD Pipeline Template
# Copy this to .github/workflows/ci.yml in your repository

name: CI/CD Pipeline

# Trigger the workflow on push and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Environment variables
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
      if: hashFiles('package.json') != ''
    
    - name: Install dependencies
      run: npm ci
      if: hashFiles('package.json') != ''
    
    - name: Run ESLint
      run: npm run lint
      if: hashFiles('package.json') != '' && hashFiles('.eslintrc*') != ''
    
    - name: Run Prettier check
      run: npm run format:check
      if: hashFiles('package.json') != '' && hashFiles('.prettierrc*') != ''
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
    
    - name: Run Python linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      if: hashFiles('**/*.py') != ''
    
    - name: Check Python formatting
      run: black --check .
      if: hashFiles('**/*.py') != ''
    
    - name: Check import sorting
      run: isort --check-only .
      if: hashFiles('**/*.py') != ''

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
      if: hashFiles('package.json') != ''
      continue-on-error: true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      if: hashFiles('package.json') != '' && env.SNYK_TOKEN != ''
      continue-on-error: true

  # Job 3: Testing
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Node.js Testing
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
      if: hashFiles('package.json') != ''
    
    - name: Install Node.js dependencies
      run: npm ci
      if: hashFiles('package.json') != ''
    
    - name: Run Node.js tests
      run: npm test
      if: hashFiles('package.json') != ''
    
    - name: Generate coverage report
      run: npm run coverage
      if: hashFiles('package.json') != ''
      continue-on-error: true
    
    # Python Testing
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
    
    - name: Run Python tests
      run: pytest --cov=. --cov-report=xml
      if: hashFiles('**/*.py') != ''
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      if: hashFiles('coverage.xml') != ''

  # Job 4: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
      if: hashFiles('package.json') != ''
    
    - name: Install dependencies
      run: npm ci
      if: hashFiles('package.json') != ''
    
    - name: Build application
      run: npm run build
      if: hashFiles('package.json') != ''
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          dist/
          build/
        retention-days: 30
      if: hashFiles('package.json') != ''

  # Job 5: Docker Build (if Dockerfile exists)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: hashFiles('Dockerfile') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name != 'pull_request'
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 6: Deploy (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: ./dist
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: rsync, scp, or API calls to your hosting provider
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke tests to verify deployment
        # Example: curl checks, basic functionality tests
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
      if: success()
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always() && secrets.SLACK_WEBHOOK != ''

  # Job 7: Release (on tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this release
          ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

# Additional workflow configurations
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
