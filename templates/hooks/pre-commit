#!/bin/sh
#
# Pre-commit hook that runs various checks before allowing a commit
# Copy this file to .git/hooks/pre-commit and make it executable
#

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

echo "üîç Running pre-commit checks..."

# Check for merge conflict markers
if git diff --cached --check; then
    print_success "No merge conflict markers found"
else
    print_error "Merge conflict markers found in staged files"
    echo "Please resolve conflicts before committing"
    exit 1
fi

# Check for large files (>10MB)
large_files=$(git diff --cached --name-only | xargs -I {} find {} -size +10M 2>/dev/null || true)
if [ -n "$large_files" ]; then
    print_error "Large files detected (>10MB):"
    echo "$large_files"
    echo "Consider using Git LFS for large files"
    exit 1
fi

# Check for sensitive information
sensitive_patterns=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "api[_-]?key\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----"
)

for pattern in "${sensitive_patterns[@]}"; do
    if git diff --cached | grep -iE "$pattern" > /dev/null; then
        print_error "Potential sensitive information found!"
        echo "Pattern: $pattern"
        echo "Please remove sensitive data before committing"
        exit 1
    fi
done

# Check for TODO/FIXME comments in staged files
todos=$(git diff --cached | grep -E "^\+.*\b(TODO|FIXME|XXX|HACK)\b" || true)
if [ -n "$todos" ]; then
    print_warning "TODO/FIXME comments found in staged changes:"
    echo "$todos"
    echo "Consider addressing these before committing"
    # Don't exit, just warn
fi

# Check for console.log/print statements (optional)
debug_statements=$(git diff --cached | grep -E "^\+.*(console\.log|print\(|debugger|var_dump)" || true)
if [ -n "$debug_statements" ]; then
    print_warning "Debug statements found:"
    echo "$debug_statements"
    echo "Consider removing debug statements before committing"
    # Don't exit, just warn
fi

# Run linting if package.json exists and has lint script
if [ -f "package.json" ] && grep -q '"lint"' package.json; then
    echo "üìù Running linter..."
    if npm run lint; then
        print_success "Linting passed"
    else
        print_error "Linting failed"
        echo "Please fix linting errors before committing"
        exit 1
    fi
fi

# Run tests if package.json exists and has test script
if [ -f "package.json" ] && grep -q '"test"' package.json; then
    echo "üß™ Running tests..."
    if npm test; then
        print_success "Tests passed"
    else
        print_error "Tests failed"
        echo "Please fix failing tests before committing"
        exit 1
    fi
fi

# Check Python files with flake8 if available
python_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
if [ -n "$python_files" ] && command -v flake8 > /dev/null; then
    echo "üêç Running Python linting..."
    if echo "$python_files" | xargs flake8; then
        print_success "Python linting passed"
    else
        print_error "Python linting failed"
        echo "Please fix Python linting errors before committing"
        exit 1
    fi
fi

# Check for proper file permissions (no executable files unless needed)
executable_files=$(git diff --cached --name-only --diff-filter=ACM | xargs -I {} test -x {} && echo {} || true)
if [ -n "$executable_files" ]; then
    print_warning "Executable files detected:"
    echo "$executable_files"
    echo "Make sure these files should be executable"
fi

print_success "All pre-commit checks passed!"
exit 0
